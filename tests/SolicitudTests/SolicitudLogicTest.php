<?php

use Laravel\Lumen\Testing\DatabaseMigrations;
use Laravel\Lumen\Testing\DatabaseTransactions;

class SolicitudLogicTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp();

        // Ejecutar migrate:fresh al inicio de cada prueba
        $this->artisan('migrate:fresh');
    }
    /**
     * Se almacena un conjunto de variables a utilizar en las pruebas
     *
     * @return void
     */
    // Datos válidos
    public function userDataValid(){
        $userDataValid = [
            'correo' => 'correo@unas.edu.pe',
            'DNI' => '71658095'
        ];
        return $userDataValid;
    }
    // Datos correo inválidos
    public function userDataCorreoInvalid(){
        $userDataCorreoInvalid = [
            'correo' => 'corfa@gmail.com',
            'DNI' => '71658095'
        ];
        return $userDataCorreoInvalid;
    }
    // Datos dni inválidos
    public function userDataDniInvalid(){
        $userDataDniInvalid = [
            'correo' => 'correo@unas.edu.pe',
            'DNI' => '7165'
        ];
        return $userDataDniInvalid;
    }
    // Datos inválidos
    public function userDataInvalid(){
        $userDataInvalid = [
            'correo' => 'corfa@gmail.com',
            'DNI' => '7165'
        ];
        return $userDataInvalid;
    }
    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithValidData(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataValid = $this->userDataValid();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('POST','/solicitud/validacion', $userDataValid);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithValidDataAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataValid = $this->userDataValid();
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('POST','/solicitud/validacion', $userDataValid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithValidDataCredentialsLevel2(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataValid = $this->userDataValid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataValid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithValidDataCredentialsLevel3(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataValid = $this->userDataValid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('Cris','Cris','Random123',3);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'Random123');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataValid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }

    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithCorreoNotValid(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataCorreoInvalid = $this->userDataCorreoInvalid();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('POST','/solicitud/validacion', $userDataCorreoInvalid);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithCorreoNotValidAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataCorreoInvalid = $this->userDataCorreoInvalid();
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('POST','/solicitud/validacion', $userDataCorreoInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithCorreoNotValidCredentialsLevel2(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataCorreoInvalid = $this->userDataCorreoInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataCorreoInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithCorreoNotValidCredentialsLevel3(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataCorreoInvalid = $this->userDataCorreoInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('Cris','Cris','Random123',3);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'Random123');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataCorreoInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }

    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithDniNotValid(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataDniInvalid = $this->userDataDniInvalid();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('POST','/solicitud/validacion', $userDataDniInvalid);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithDniNotValidAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataDniInvalid = $this->userDataDniInvalid();
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('POST','/solicitud/validacion', $userDataDniInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithDniNotValidCredentialsLevel2(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataDniInvalid = $this->userDataDniInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataDniInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithDniNotValidCredentialsLevel3(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataDniInvalid = $this->userDataDniInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('Cris','Cris','Random123',3);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'Random123');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataDniInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }

    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithInvalidData(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataInvalid = $this->userDataInvalid();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('POST','/solicitud/validacion', $userDataInvalid);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithInvalidDataAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataInvalid = $this->userDataInvalid();
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('POST','/solicitud/validacion', $userDataInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithInvalidDataCredentialsLevel2(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataInvalid = $this->userDataInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testSolicitudValidacionWithInvalidDataCredentialsLevel3(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataInvalid = $this->userDataInvalid();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('Cris','Cris','Random123',3);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'Random123');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/validacion', $userDataInvalid, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }

    // Upload
    /**
     * Función que retorna datos para pasar por el cuerpo de la solicitud.
     *
     * @return void
     */
    public function dataValidUpload(){
        $dataValidUpload = [
            'id_convocatoria' => 1,
            'dni_alumno' => 71658095,
            'name_file' => 'demo.docx',
            'file' => '',
        ];
        return $dataValidUpload;
    }
    public function dataInvalidUpload(){
        $dataInvalidUpload = [
            'id_convocatoria' => 1,
            'dni_alumno' => '3654534634',
            'name_file' => 'noname.docx',
            'file' => 'jkaOBDUBJADUObuolbovboiuOBbouooGRTD',
        ];
        return $dataValidUpload;
    }
    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testUploadWithValidData(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $dataValidUpload = $this->dataValidUpload();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('POST','/solicitud/uploadDocument', $dataValidUpload);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testUploadWithValidDataAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $dataValidUpload = $this->dataValidUpload();
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('POST','/solicitud/uploadDocument', $dataValidUpload, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testUploadWithInvalidDataAdminCredentials(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $dataInvalidUpload = $this->dataInvalidUpload();
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('POST','/solicitud/uploadDocument', $dataInvalidUpload, [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }

    // Export

    /**
     * Verifica que alguien no logueado, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testExportWithInvalidData(){
        // Recuperamos los datos para pasar por el cuerpo de la solicitud
        $userDataInvalid = $this->userDataInvalid();
        // Enviamos solicitudes a rutas protegidas sin credenciales
        $response = $this->call('GET','/solicitud/export');
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
        /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }
    /**
     * Verifica que un usuario administrador pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testExportWithInvalidDataAdminCredentials(){
        // Enviamos una solicitud de inicio de sesión con las credenciales del usuario
        $response = $this->login('admin','admin');
        // Verificamos que la solicitud haya sido exitosa (código de estado 200)
        $this->assertEquals(200, $response->status());
        // Separamos el TOKEN para validar el acceso
        $token = $response->json('token');
        // Enviamos solicitudes a rutas protegidas con rol/permiso de Admin
        $response = $this->call('GET','/solicitud/export', [], [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso permitido
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testExportWithInvalidDataCredentialsLevel2(){
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('ald','ald','passwor',2);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'passwor');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('GET','/solicitud/export', [], [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         $response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);
    }
    /**
     * Verifica que un usuario NO administrador, NO pueda ver la lista de convocatorias.
     *
     * @return void
     */
    public function testExportWithInvalidDataCredentialsLevel3(){
        // Creamos un usuario de prueba con un determinado rol o permisos
        $user = $this->createUser('Cris','Cris','Random123',3);
        // Recibimos el TOKEN para validar el acceso
        $token = $this->getToken($user->username,'Random123');
        // Enviamos solicitudes a rutas protegidas con diferentes roles/permisos
        $response = $this->call('GET','/solicitud/export', [], [], [], ['HTTP_Authorization' => 'Bearer ' . $token]);
         // Verificamos que los usuarios con el rol adecuado tengan acceso denegado
         $this->assertEquals(200, $response->status());
         // Verificamos que la estructura del Json es la esperada
         /*$response->assertJsonStructure([
            'msg',
            'detalle' => [],
        ])->assertJson([ // Verificamos que el Json tenga los datos esperados
            'msg' => 'Ultima convocatoria mostrada',
            'detalle' => [
                "nombre" => 'Convocatoria2024-1',
            ],
        ]);*/
    }
}
